import os
import logging
import json
import requests
from datetime import datetime
from flask import Flask, request, jsonify
import openai
from typing import Dict, List, Optional
import time
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')
ADMIN_CHAT_ID = "7770604629"
LEADS_CHAT_ID = "-1002536751047"
CHANNEL_USERNAME = "@smkornaukhovv"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not TELEGRAM_TOKEN:
    logger.error("TELEGRAM_TOKEN not set!")
if not OPENAI_API_KEY:
    logger.error("OPENAI_API_KEY not set!")
else:
    openai.api_key = OPENAI_API_KEY

# URL –¥–ª—è Telegram API
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
chat_histories = {}
user_states = {}
apartments_cache = None
cache_time = 0
subscription_checks = {}

# ====== –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó GOOGLE SHEETS ======
def get_apartments_from_sheets():
    global apartments_cache, cache_time
    
    # –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ 15 –º–∏–Ω—É—Ç
    if apartments_cache and (time.time() - cache_time) < 900:
        logger.info(f"Using cached data: {len(apartments_cache)} apartments")
        return apartments_cache
    
    sheet_urls = [
        "https://docs.google.com/spreadsheets/d/e/2PACX-1vSiwJ2LTzkOdpQNfqNBnxz0SGcHPz36HHm6voblS_2SdAK2H5oO1-xbZt1yF3-Y-YlPiKIN5CAxZpVh/pub?output=csv",
        "https://docs.google.com/spreadsheets/d/e/2PACX-1vSiwJ2LTzkOdpQNfqNBnxz0SGcHPz36HHm6voblS_2SdAK2H5oO1-xbZt1yF3-Y-YlPiKIN5CAxZpVh/pub?gid=0&single=true&output=csv"
    ]
    
    for sheet_url in sheet_urls:
        try:
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ rate limit
            time.sleep(random.uniform(0.1, 0.5))
            
            response = requests.get(sheet_url, timeout=20, headers={
                'User-Agent': 'Mozilla/5.0 (compatible; PropertyBot/1.0)',
                'Accept': 'text/csv,text/plain,*/*'
            })
            
            if response.status_code == 200 and len(response.text) > 100:
                logger.info(f"Successfully fetched data from Google Sheets")
                apartments = parse_csv_to_apartments(response.text)
                
                if apartments:
                    apartments_cache = apartments
                    cache_time = time.time()
                    return apartments
                    
        except Exception as e:
            logger.error(f"Failed to fetch from {sheet_url}: {e}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å
    logger.warning("Using test data")
    return get_test_apartments()

def parse_csv_to_apartments(csv_data: str) -> List[Dict]:
    apartments = []
    lines = csv_data.strip().split('\n')
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    for i, line in enumerate(lines[1:], 1):
        if not line.strip():
            continue
            
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ CSV
            parts = line.split(',')
            if len(parts) >= 7:
                apartment = {
                    '—ç—Ç–∞–∂': int(parts[0]) if parts[0].isdigit() else 0,
                    '–Ω–æ–º–µ—Ä': int(parts[1]) if parts[1].isdigit() else 0,
                    '–ø–ª–æ—â–∞–¥—å': float(parts[2].replace('$', '').replace(',', '')) if parts[2] else 0,
                    '–≤–∏–¥': parts[3].strip(),
                    '—Ü–µ–Ω–∞_–º2': float(parts[4].replace('$', '').replace(',', '')) if parts[4] else 0,
                    '–æ–±—â–∞—è_—Å—É–º–º–∞': float(parts[5].replace('$', '').replace(',', '')) if parts[5] else 0,
                    '–∂–∫': parts[6].strip() if len(parts) > 6 else 'Thalassa Group',
                    '—Å—Ç–∞—Ç—É—Å': '–°–≤–æ–±–æ–¥–Ω—ã–π'
                }
                
                if apartment['–Ω–æ–º–µ—Ä'] > 0 and apartment['–ø–ª–æ—â–∞–¥—å'] > 0:
                    apartments.append(apartment)
                    
        except Exception as e:
            logger.error(f"Error parsing line {i}: {e}")
            continue
    
    logger.info(f"Parsed {len(apartments)} apartments")
    return apartments

def get_test_apartments():
    return [
        {
            '—ç—Ç–∞–∂': 5,
            '–Ω–æ–º–µ—Ä': 319,
            '–ø–ª–æ—â–∞–¥—å': 35.5,
            '–≤–∏–¥': '–ú–æ—Ä–µ',
            '—Ü–µ–Ω–∞_–º2': 1520,
            '–æ–±—â–∞—è_—Å—É–º–º–∞': 54080,
            '–∂–∫': 'Thalassa Group',
            '—Å—Ç–∞—Ç—É—Å': '–°–≤–æ–±–æ–¥–Ω—ã–π'
        },
        {
            '—ç—Ç–∞–∂': 8,
            '–Ω–æ–º–µ—Ä': 412,
            '–ø–ª–æ—â–∞–¥—å': 29.1,
            '–≤–∏–¥': '–ì–æ—Ä–æ–¥',
            '—Ü–µ–Ω–∞_–º2': 1520,
            '–æ–±—â–∞—è_—Å—É–º–º–∞': 44264,
            '–∂–∫': 'Thalassa Group',
            '—Å—Ç–∞—Ç—É—Å': '–°–≤–æ–±–æ–¥–Ω—ã–π'
        },
        {
            '—ç—Ç–∞–∂': 12,
            '–Ω–æ–º–µ—Ä': 514,
            '–ø–ª–æ—â–∞–¥—å': 21.6,
            '–≤–∏–¥': '–ú–æ—Ä–µ',
            '—Ü–µ–Ω–∞_–º2': 1520,
            '–æ–±—â–∞—è_—Å—É–º–º–∞': 32832,
            '–∂–∫': 'Thalassa Group',
            '—Å—Ç–∞—Ç—É—Å': '–°–≤–æ–±–æ–¥–Ω—ã–π'
        }
    ]

# ====== TELEGRAM –§–£–ù–ö–¶–ò–ò ======
def send_telegram_message(chat_id: str, text: str, reply_markup=None, parse_mode='HTML'):
    data = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': parse_mode,
        'disable_web_page_preview': True
    }
    if reply_markup:
        data['reply_markup'] = json.dumps(reply_markup)
    
    try:
        response = requests.post(f"{TELEGRAM_API_URL}/sendMessage", data=data)
        return response.json()
    except Exception as e:
        logger.error(f"Failed to send message: {e}")
        return None

def check_subscription(user_id: int) -> bool:
    try:
        response = requests.get(f"{TELEGRAM_API_URL}/getChatMember", params={
            'chat_id': CHANNEL_USERNAME,
            'user_id': user_id
        })
        if response.status_code == 200:
            data = response.json()
            status = data.get('result', {}).get('status', '')
            return status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"Failed to check subscription: {e}")
        return True  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    return False

# ====== GPT –§–£–ù–ö–¶–ò–Ø ======
def ask_gpt(messages: List[Dict]) -> str:
    try:
        client = openai.OpenAI(api_key=OPENAI_API_KEY)
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=messages,
            max_tokens=400,
            temperature=0.5
        )
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"OpenAI API error: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ @smkornaukhovv"

# ====== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ======
def process_message(update: Dict):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ update
        message = update.get('message', {})
        chat_id = str(message.get('chat', {}).get('id', ''))
        user_id = message.get('from', {}).get('id', 0)
        username = message.get('from', {}).get('username', '–Ω–µ—Ç_username')
        first_name = message.get('from', {}).get('first_name', '–¥—Ä—É–≥')
        text = message.get('text', '').strip()
        
        if not chat_id or not text:
            return
        
        logger.info(f"Message from {first_name} ({user_id}): {text}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        global subscription_checks
        last_check = subscription_checks.get(chat_id, 0)
        current_time = time.time()
        
        if not check_subscription(user_id):
            if current_time - last_check >= 60:
                send_telegram_message(
                    chat_id, 
                    "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª üëâ @smkornaukhovv, –∞ –ø–æ—Ç–æ–º –Ω–∞–∂–º–∏ /start"
                )
                subscription_checks[chat_id] = current_time
            return
        
        # –ö–æ–º–∞–Ω–¥–∞ /start
        if text.lower() == '/start':
            send_telegram_message(
                chat_id,
                f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {first_name}! –Ø AI-–±–æ—Ç –∏ –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –≤ –ë–∞—Ç—É–º–∏.\n"
                "–°–∫–∞–∂–∏—Ç–µ, –≤—ã –∏—â–µ—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É –±–æ–ª—å—à–µ –¥–ª—è –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏–ª–∏ –¥–ª—è —Å–¥–∞—á–∏ –≤ –∞—Ä–µ–Ω–¥—É?"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_state = user_states.get(chat_id, {'state': 'normal', 'data': {}})
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø–æ–∫–∞–∑
        if user_state['state'] == 'booking_time':
            user_state['data']['time'] = text
            user_state['state'] = 'booking_phone'
            user_states[chat_id] = user_state
            
            keyboard = {
                "keyboard": [[{"text": "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º (WA)", "request_contact": True}]],
                "resize_keyboard": True,
                "one_time_keyboard": True
            }
            send_telegram_message(
                chat_id,
                "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è WhatsApp (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É).",
                reply_markup=keyboard
            )
            return
            
        elif user_state['state'] == 'booking_phone':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º
            contact = message.get('contact', {})
            phone = contact.get('phone_number', '') or text
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞
            digits = ''.join(filter(str.isdigit, phone))
            if len(digits) < 9:
                keyboard = {
                    "keyboard": [[{"text": "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º (WA)", "request_contact": True}]],
                    "resize_keyboard": True,
                    "one_time_keyboard": True
                }
                send_telegram_message(
                    chat_id,
                    "–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä. –ü—Ä–∏—à–ª–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +9955‚Ä¶ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É.",
                    reply_markup=keyboard
                )
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏–¥ –≤ –≥—Ä—É–ø–ø—É
            wa_link = f"https://wa.me/{digits}"
            tg_link = f"tg://user?id={user_id}"
            
            lead_text = (
                "üè† <b>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –ø–æ–∫–∞–∑</b>\n\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: @{username} (ID: <code>{user_id}</code>)\n"
                f"üìÖ –í—Ä–µ–º—è: <b>{user_state['data'].get('time', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}</b>\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω (WA): <b>{phone}</b>\n"
                f'üîó –°–≤—è–∑—å: <a href="{tg_link}">TG</a> | <a href="{wa_link}">WA</a>'
            )
            
            send_telegram_message(LEADS_CHAT_ID, lead_text)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            user_states[chat_id] = {'state': 'normal', 'data': {}}
            
            send_telegram_message(
                chat_id,
                f"–ì–æ—Ç–æ–≤–æ! –Ø –∑–∞–ø–∏—Å–∞–ª –≤–∞—Å –Ω–∞ –ø–æ–∫–∞–∑ –Ω–∞ {user_state['data'].get('time', '—É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è')} ‚úÖ",
                reply_markup={"remove_keyboard": True}
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø–æ–∫–∞–∑
        booking_triggers = [
            '—Ö–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å', '–∑–∞–ø–∏—Å—å –Ω–∞ –ø–æ–∫–∞–∑', '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è',
            '–æ–Ω–ª–∞–π–Ω –ø–æ–∫–∞–∑', '–≤—Å—Ç—Ä–µ—á–∞', '–Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–∫–∞–∑',
            '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É', '—Ö–æ—á—É –Ω–∞ –ø–æ–∫–∞–∑', '–ø–æ–∫–∞–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã'
        ]
        
        if any(trigger in text.lower() for trigger in booking_triggers):
            user_states[chat_id] = {'state': 'booking_time', 'data': {}}
            send_telegram_message(
                chat_id,
                "–û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–∏—à—É –≤–∞—Å –Ω–∞ –ø–æ–∫–∞–∑.\n\n"
                "<u>–®–∞–≥ 1 –∏–∑ 2</u> ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ —É–¥–æ–±–Ω—ã–µ <b>–¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–¢–±–∏–ª–∏—Å–∏)</b>.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´13 –∞–≤–≥—É—Å—Ç–∞, 15:00¬ª"
            )
            return
        
        # GPT –æ–±—Ä–∞–±–æ—Ç–∫–∞
        apartments = get_apartments_from_sheets()
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è GPT
        studio_count = sum(1 for a in apartments if a['–ø–ª–æ—â–∞–¥—å'] <= 40)
        studio_prices = [a['–æ–±—â–∞—è_—Å—É–º–º–∞'] for a in apartments if a['–ø–ª–æ—â–∞–¥—å'] <= 40]
        studio_min = min(studio_prices) if studio_prices else 0
        studio_max = max(studio_prices) if studio_prices else 0
        
        base_stats = f"–í –±–∞–∑–µ {len(apartments)} –∫–≤–∞—Ä—Ç–∏—Ä, —Å—Ç—É–¥–∏–π ‚Äî {studio_count}, —Ü–µ–Ω—ã: ${studio_min}-${studio_max}"
        
        # –ë–∞–∑–∞ –¥–ª—è GPT
        base_info = "\n".join([
            f"–ñ–ö: {a['–∂–∫']}, –≠—Ç–∞–∂: {a['—ç—Ç–∞–∂']}, ‚Ññ: {a['–Ω–æ–º–µ—Ä']}, "
            f"–ü–ª–æ—â–∞–¥—å: {a['–ø–ª–æ—â–∞–¥—å']} –º¬≤, –í–∏–¥: {a['–≤–∏–¥']}, "
            f"–¶–µ–Ω–∞: ${a['–æ–±—â–∞—è_—Å—É–º–º–∞']}"
            for a in apartments[:20]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
        ])
        
        # –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞
        history = chat_histories.get(chat_id, [])
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        system_prompt = f"""–¢—ã ‚Äî AI-–±—Ä–æ–∫–µ—Ä –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –ë–∞—Ç—É–º–∏. –û–±—â–∞–π—Å—è –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ –¥–µ–ª—É.

–ü—Ä–∞–≤–∏–ª–∞:
- –û–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
- –ù–µ –∑–¥–æ—Ä–æ–≤–∞–π—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ
- –ü–æ—Å–ª–µ 2-3 —É—Ç–æ—á–Ω–µ–Ω–∏–π –ø—Ä–µ–¥–ª–∞–≥–∞–π 1-2 –≤–∞—Ä–∏–∞–Ω—Ç–∞
- –ï—Å–ª–∏ –±—é–¥–∂–µ—Ç –º–∞–ª ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ—à–µ–Ω–∏–µ (—Ä–∞—Å—Å—Ä–æ—á–∫–∞, –º–µ–Ω—å—à–µ –º–µ—Ç—Ä–∞–∂)
- –ü—Ä–∏ –ø–æ–∫–∞–∑–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–æ–±–∞–≤—å: "–ü–æ–∫–∞–∑–∞—Ç—å? –ù–∞–ø–∏—à–∏—Ç–µ: –∑–∞–ø–∏—Å—å –Ω–∞ –ø–æ–∫–∞–∑"

–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {first_name}
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {base_stats}

–ë–∞–∑–∞ –∫–≤–∞—Ä—Ç–∏—Ä:
{base_info}"""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º messages –¥–ª—è GPT
        messages = [{"role": "system", "content": system_prompt}]
        messages.extend(history[-6:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–æ–æ–±—â–µ–Ω–∏–π
        messages.append({"role": "user", "content": text})
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT
        answer = ask_gpt(messages)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        history.append({"role": "user", "content": text})
        history.append({"role": "assistant", "content": answer})
        chat_histories[chat_id] = history[-10:]  # –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        send_telegram_message(chat_id, answer)
        
    except Exception as e:
        logger.error(f"Error processing message: {e}")

# ====== FLASK ROUTES ======
@app.route('/')
def index():
    return f"""
    <h1>Telegram Bot Status</h1>
    <p>Bot is running!</p>
    <p>TELEGRAM_TOKEN: {'‚úÖ Set' if TELEGRAM_TOKEN else '‚ùå Not set'}</p>
    <p>OPENAI_API_KEY: {'‚úÖ Set' if OPENAI_API_KEY else '‚ùå Not set'}</p>
    <p>Time: {datetime.now()}</p>
    """

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        update = request.get_json()
        logger.info(f"Received update: {update}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ —Ñ–æ–Ω–µ
        process_message(update)
        
        return jsonify({'status': 'ok'})
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return jsonify({'status': 'error'}), 500

@app.route('/set_webhook')
def set_webhook():
    # –ü–æ–ª—É—á–∞–µ–º URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    host = request.headers.get('Host', 'batumi-realestate-bot.onrender.com')
    webhook_url = f"https://{host}/webhook"
    
    try:
        response = requests.post(
            f"{TELEGRAM_API_URL}/setWebhook",
            data={'url': webhook_url}
        )
        return jsonify(response.json())
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port)
