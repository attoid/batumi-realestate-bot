import os
import sys
import time
import json
import csv
import random
import logging
from io import StringIO
from datetime import datetime
from typing import Dict, List

import requests
from flask import Flask, request, jsonify

# ======== –õ–û–ì–ò ========
logging.basicConfig(
    level=os.getenv("LOG_LEVEL", "INFO"),
    format="%(asctime)s %(levelname)s %(message)s"
)
log = logging.getLogger("batumi-realestate-bot")

# ======== –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ========
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")     # –∑–∞–¥–∞—ë—Ç—Å—è –≤ Render ‚Üí Environment
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")     # –∑–∞–¥–∞—ë—Ç—Å—è –≤ Render ‚Üí Environment
LEADS_CHAT_ID = os.getenv("LEADS_CHAT_ID", "-1002536751047")   # –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME", "@smkornaukhovv")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"

# –ñ—ë—Å—Ç–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤
missing = [name for name, val in [
    ("TELEGRAM_TOKEN", TELEGRAM_TOKEN),
    ("OPENAI_API_KEY", OPENAI_API_KEY),
] if not val]
if missing:
    log.critical(f"–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}")
    sys.exit(1)

# ======== OpenAI (–Ω–æ–≤—ã–π SDK 1.x) ========
# –¢—Ä–µ–±—É–µ—Ç openai>=1.0 –≤ requirements
try:
    from openai import OpenAI
    _client = OpenAI(api_key=OPENAI_API_KEY)
    def ask_gpt(messages: List[Dict]) -> str:
        try:
            resp = _client.chat.completions.create(
                model="gpt-4o",              # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ gpt-4o-mini –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏
                messages=messages,
                max_tokens=400,
                temperature=0.5,
            )
            return resp.choices[0].message.content
        except Exception as e:
            log.error(f"OpenAI API error: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
except Exception as e:
    # –§–æ–ª–±—ç–∫: –µ—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ openai 1.x –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
    log.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å OpenAI SDK: {e}")
    def ask_gpt(messages: List[Dict]) -> str:
        return "AI-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π @smkornaukhovv."

# ======== Flask ========
app = Flask(__name__)

# ======== –ü–ê–ú–Ø–¢–¨ (–≤ RAM, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ) ========
chat_histories: Dict[str, List[Dict]] = {}
user_states: Dict[str, Dict] = {}
apartments_cache: List[Dict] = []
cache_time = 0.0
subscription_checks: Dict[str, float] = {}

# ======== –î–ê–ù–ù–´–ï –ò–ó GOOGLE SHEETS ========
SHEETS_URLS = [
    "https://docs.google.com/spreadsheets/d/e/2PACX-1vSiwJ2LTzkOdpQNfqNBnxz0SGcHPz36HHm6voblS_2SdAK2H5oO1-xbZt1yF3-Y-YlPiKIN5CAxZpVh/pub?output=csv",
    "https://docs.google.com/spreadsheets/d/e/2PACX-1vSiwJ2LTzkOdpQNfqNBnxz0SGcHP–∑36HH–º6voblS_2SdAK2H5oO1-xbZt1yF3-Y-YlPiKIN5CAxZpVh/pub?gid=0&single=true&output=csv"
]

def get_apartments_from_sheets() -> List[Dict]:
    """–ö–µ—à–∏—Ä—É–µ–º –Ω–∞ 15 –º–∏–Ω—É—Ç, —É—Å—Ç–æ–π—á–∏–≤—ã–π CSV-–ø–∞—Ä—Å–∏–Ω–≥."""
    global apartments_cache, cache_time
    if apartments_cache and (time.time() - cache_time) < 900:
        return apartments_cache

    for url in SHEETS_URLS:
        try:
            time.sleep(random.uniform(0.1, 0.4))
            r = requests.get(url, timeout=20, headers={
                "User-Agent": "Mozilla/5.0 (compatible; PropertyBot/1.0)"
            })
            if r.status_code == 200 and len(r.text) > 100:
                apartments = parse_csv_to_apartments(r.text)
                if apartments:
                    apartments_cache = apartments
                    cache_time = time.time()
                    log.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(apartments)} –∫–≤–∞—Ä—Ç–∏—Ä –∏–∑ Google Sheets")
                    return apartments
        except Exception as e:
            log.warning(f"Sheets fetch fail ({url}): {e}")

    log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Sheets ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã.")
    apartments_cache = get_test_apartments()
    cache_time = time.time()
    return apartments_cache

def parse_csv_to_apartments(csv_text: str) -> List[Dict]:
    apartments: List[Dict] = []
    reader = csv.reader(StringIO(csv_text))
    next(reader, None)  # –∑–∞–≥–æ–ª–æ–≤–æ–∫

    for row in reader:
        try:
            if len(row) < 7:
                continue
            def num(x: str) -> float:
                return float(x.replace("$", "").replace(",", "").strip()) if x else 0.0
            def intnum(x: str) -> int:
                x = x.strip()
                return int(x) if x.isdigit() else 0

            apt = {
                "—ç—Ç–∞–∂": intnum(row[0]),
                "–Ω–æ–º–µ—Ä": intnum(row[1]),
                "–ø–ª–æ—â–∞–¥—å": num(row[2]),
                "–≤–∏–¥": row[3].strip(),
                "—Ü–µ–Ω–∞_–º2": num(row[4]),
                "–æ–±—â–∞—è_—Å—É–º–º–∞": num(row[5]),
                "–∂–∫": row[6].strip(),
                "—Å—Ç–∞—Ç—É—Å": "–°–≤–æ–±–æ–¥–Ω—ã–π",
            }
            if apt["–Ω–æ–º–µ—Ä"] > 0 and apt["–ø–ª–æ—â–∞–¥—å"] > 0:
                apartments.append(apt)
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ {row}: {e}")
    return apartments

def get_test_apartments() -> List[Dict]:
    return [
        {'—ç—Ç–∞–∂': 5,  '–Ω–æ–º–µ—Ä': 319, '–ø–ª–æ—â–∞–¥—å': 35.5, '–≤–∏–¥': '–ú–æ—Ä–µ',  '—Ü–µ–Ω–∞_–º2': 1520, '–æ–±—â–∞—è_—Å—É–º–º–∞': 54080, '–∂–∫': 'Thalassa Group', '—Å—Ç–∞—Ç—É—Å': '–°–≤–æ–±–æ–¥–Ω—ã–π'},
        {'—ç—Ç–∞–∂': 8,  '–Ω–æ–º–µ—Ä': 412, '–ø–ª–æ—â–∞–¥—å': 29.1, '–≤–∏–¥': '–ì–æ—Ä–æ–¥', '—Ü–µ–Ω–∞_–º2': 1520, '–æ–±—â–∞—è_—Å—É–º–º–∞': 44264, '–∂–∫': 'Thalassa Group', '—Å—Ç–∞—Ç—É—Å': '–°–≤–æ–±–æ–¥–Ω—ã–π'},
        {'—ç—Ç–∞–∂': 12, '–Ω–æ–º–µ—Ä': 514, '–ø–ª–æ—â–∞–¥—å': 21.6, '–≤–∏–¥': '–ú–æ—Ä–µ',  '—Ü–µ–Ω–∞_–º2': 1520, '–æ–±—â–∞—è_—Å—É–º–º–∞': 32832, '–∂–∫': 'Thalassa Group', '—Å—Ç–∞—Ç—É—Å': '–°–≤–æ–±–æ–¥–Ω—ã–π'},
    ]

# ======== TELEGRAM ========
def send_telegram_message(chat_id: str, text: str, reply_markup=None):
    data = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": True,
    }
    if reply_markup:
        data["reply_markup"] = json.dumps(reply_markup)
    try:
        r = requests.post(f"{TELEGRAM_API_URL}/sendMessage", data=data, timeout=20)
        return r.json()
    except Exception as e:
        log.error(f"sendMessage error: {e}")

def check_subscription(user_id: int) -> bool:
    try:
        r = requests.get(
            f"{TELEGRAM_API_URL}/getChatMember",
            params={"chat_id": CHANNEL_USERNAME, "user_id": user_id},
            timeout=20
        )
        if r.status_code == 200:
            status = r.json().get("result", {}).get("status", "")
            return status in ["member", "administrator", "creator"]
    except Exception as e:
        log.warning(f"check_subscription error: {e}")
    return True  # –ø—Ä–∏ –æ—à–∏–±–∫–µ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# ======== –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê ========
BOOKING_TRIGGERS = [
    "—Ö–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å","–∑–∞–ø–∏—Å—å –Ω–∞ –ø–æ–∫–∞–∑","–∑–∞–ø–∏—Å–∞—Ç—å—Å—è",
    "–æ–Ω–ª–∞–π–Ω –ø–æ–∫–∞–∑","–≤—Å—Ç—Ä–µ—á–∞","–Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–∫–∞–∑",
    "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É","—Ö–æ—á—É –Ω–∞ –ø–æ–∫–∞–∑","–ø–æ–∫–∞–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã",
]

def process_message(update: Dict):
    try:
        message = update.get("message", {}) or update.get("edited_message", {})
        chat_id = str(message.get("chat", {}).get("id", ""))
        user_id = message.get("from", {}).get("id", 0)
        username = message.get("from", {}).get("username", "–Ω–µ—Ç_username")
        first_name = message.get("from", {}).get("first_name", "–¥—Ä—É–≥")
        text = (message.get("text") or "").strip()

        if not chat_id or not text:
            return

        log.info(f"msg from {first_name}({user_id}): {text}")

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Ä–∞–∑ –≤ 60 —Å–µ–∫ / –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        now = time.time()
        last = subscription_checks.get(chat_id, 0)
        if now - last > 60:
            if not check_subscription(user_id):
                subscription_checks[chat_id] = now
                send_telegram_message(chat_id, "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª üëâ @smkornaukhovv, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ /start")
                return

        # /start
        if text.lower() == "/start":
            send_telegram_message(
                chat_id,
                f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {first_name}! –Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –≤ –ë–∞—Ç—É–º–∏.\n"
                f"–°–∫–∞–∂–∏—Ç–µ, –≤—ã –∏—â–µ—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É –¥–ª—è –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏–ª–∏ –¥–ª—è —Å–¥–∞—á–∏?"
            )
            return

        # —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø–æ–∫–∞–∑
        state = user_states.get(chat_id, {"state": "normal", "data": {}})

        if state["state"] == "booking_time":
            state["data"]["time"] = text
            state["state"] = "booking_phone"
            user_states[chat_id] = state
            keyboard = {
                "keyboard": [[{"text": "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º (WA)", "request_contact": True}]],
                "resize_keyboard": True,
                "one_time_keyboard": True
            }
            send_telegram_message(chat_id, "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä WhatsApp (+995‚Ä¶ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É).", reply_markup=keyboard)
            return

        if state["state"] == "booking_phone":
            contact = message.get("contact", {})
            phone = contact.get("phone_number") or text
            digits = "".join(ch for ch in phone if ch.isdigit())
            if len(digits) < 9:
                keyboard = {
                    "keyboard": [[{"text": "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º (WA)", "request_contact": True}]],
                    "resize_keyboard": True,
                    "one_time_keyboard": True
                }
                send_telegram_message(chat_id, "–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç +9955‚Ä¶ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É.", reply_markup=keyboard)
                return

            wa_link = f"https://wa.me/{digits}"
            tg_link = f"tg://user?id={user_id}"
            lead_text = (
                "üè† <b>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –ø–æ–∫–∞–∑</b>\n\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: @{username} (ID: <code>{user_id}</code>)\n"
                f"üìÖ –í—Ä–µ–º—è: <b>{state['data'].get('time','–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}</b>\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω (WA): <b>{phone}</b>\n"
                f'üîó –°–≤—è–∑—å: <a href="{tg_link}">TG</a> | <a href="{wa_link}">WA</a>'
            )
            send_telegram_message(LEADS_CHAT_ID, lead_text)
            user_states[chat_id] = {"state": "normal", "data": {}}
            send_telegram_message(chat_id, "–ì–æ—Ç–æ–≤–æ! –Ø –∑–∞–ø–∏—Å–∞–ª –≤–∞—Å –Ω–∞ –ø–æ–∫–∞–∑ ‚úÖ", reply_markup={"remove_keyboard": True})
            return

        # —Ç—Ä–∏–≥–≥–µ—Ä—ã –∑–∞–ø–∏—Å–∏
        if any(t in text.lower() for t in BOOKING_TRIGGERS):
            user_states[chat_id] = {"state": "booking_time", "data": {}}
            send_telegram_message(
                chat_id,
                "–û—Ç–ª–∏—á–Ω–æ! <u>–®–∞–≥ 1 –∏–∑ 2</u> ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ —É–¥–æ–±–Ω—ã–µ <b>–¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–¢–±–∏–ª–∏—Å–∏)</b>.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´13 –∞–≤–≥—É—Å—Ç–∞, 15:00¬ª"
            )
            return

        # GPT-–æ—Ç–≤–µ—Ç —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—ë–º
        apartments = get_apartments_from_sheets()
        studios = [a for a in apartments if a["–ø–ª–æ—â–∞–¥—å"] <= 40]
        studio_min = min((a["–æ–±—â–∞—è_—Å—É–º–º–∞"] for a in studios), default=0)
        studio_max = max((a["–æ–±—â–∞—è_—Å—É–º–º–∞"] for a in studios), default=0)
        base_stats = f"–í –±–∞–∑–µ {len(apartments)} –∫–≤–∞—Ä—Ç–∏—Ä, —Å—Ç—É–¥–∏–π ‚Äî {len(studios)}, —Ü–µ–Ω—ã: ${studio_min}-{studio_max}"

        base_info = "\n".join(
            f"–ñ–ö: {a['–∂–∫']}, –≠—Ç–∞–∂: {a['—ç—Ç–∞–∂']}, ‚Ññ: {a['–Ω–æ–º–µ—Ä']}, –ü–ª–æ—â–∞–¥—å: {a['–ø–ª–æ—â–∞–¥—å']} –º¬≤, –í–∏–¥: {a['–≤–∏–¥']}, –¶–µ–Ω–∞: ${a['–æ–±—â–∞—è_—Å—É–º–º–∞']}"
            for a in apartments[:20]
        )

        system_prompt = f"""–¢—ã ‚Äî AI-–±—Ä–æ–∫–µ—Ä –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –ë–∞—Ç—É–º–∏. –û–±—â–∞–π—Å—è –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ –¥–µ–ª—É.

–ü—Ä–∞–≤–∏–ª–∞:
- –û–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
- –ù–µ –∑–¥–æ—Ä–æ–≤–∞–π—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ
- –ü–æ—Å–ª–µ 2-3 —É—Ç–æ—á–Ω–µ–Ω–∏–π –ø—Ä–µ–¥–ª–æ–∂–∏ 1-2 –≤–∞—Ä–∏–∞–Ω—Ç–∞
- –ï—Å–ª–∏ –±—é–¥–∂–µ—Ç –º–∞–ª ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ—à–µ–Ω–∏–µ (—Ä–∞—Å—Å—Ä–æ—á–∫–∞, –º–µ–Ω—å—à–µ –º–µ—Ç—Ä–∞–∂)
- –í –∫–æ–Ω—Ü–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ–±–∞–≤—å: "–ü–æ–∫–∞–∑–∞—Ç—å? –ù–∞–ø–∏—à–∏—Ç–µ: –∑–∞–ø–∏—Å—å –Ω–∞ –ø–æ–∫–∞–∑"

–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {first_name}
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {base_stats}

–ë–∞–∑–∞ –∫–≤–∞—Ä—Ç–∏—Ä:
{base_info}"""

        history = chat_histories.get(chat_id, [])
        messages = [{"role": "system", "content": system_prompt}] + history[-6:] + [{"role": "user", "content": text}]
        answer = ask_gpt(messages)

        history.extend([{"role": "user", "content": text}, {"role": "assistant", "content": answer}])
        chat_histories[chat_id] = history[-10:]

        send_telegram_message(chat_id, answer)

    except Exception as e:
        log.error(f"process_message error: {e}")

# ======== ROUTES ========
@app.route("/")
def health():
    return f"""
    <h1>Telegram Bot Status</h1>
    <p>OK ‚Äî {datetime.utcnow()} UTC</p>
    <p>TELEGRAM_TOKEN: ‚úÖ Set</p>
    <p>OPENAI_API_KEY: ‚úÖ Set</p>
    """

@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        update = request.get_json(silent=True) or {}
        log.info(f"update: {update}")
        process_message(update)
        return jsonify({"status": "ok"})
    except Exception as e:
        log.error(f"webhook error: {e}")
        return jsonify({"status": "error"}), 500

@app.route("/set_webhook")
def set_webhook():
    """
    –õ—É—á—à–µ –∑–∞–¥–∞—Ç—å TELEGRAM_WEBHOOK_URL –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://<you>.onrender.com/webhook)
    —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ Host.
    """
    webhook_url = os.getenv("TELEGRAM_WEBHOOK_URL")
    if not webhook_url:
        # –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî —Å—Ç—Ä–æ–∏–º –∏–∑ Host
        host = request.headers.get("Host", "")
        scheme = "https"
        webhook_url = f"{scheme}://{host}/webhook"
    try:
        r = requests.post(f"{TELEGRAM_API_URL}/setWebhook", data={"url": webhook_url}, timeout=20)
        return jsonify(r.json())
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    port = int(os.getenv("PORT", "10000"))
    app.run(host="0.0.0.0", port=port)
